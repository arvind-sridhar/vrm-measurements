'''
Created on Apr 21, 2017

@author: rid

copied from lku
'''
from measurement.instruments.E8251A import E8251A 


class E8251ABroken(E8251A):
    def __init__(self, instr, powerProtectionLevel, alreadyReset):
        self.E8251A.__init__(self, instr, powerProtectionLevel, alreadyReset)
        
        self.validRangeList = {100000000.0: [(0.13, 0.13), (0.16999999999999998, 0.17699999999999999), (0.23999999999999994, 0.24099999999999994), (0.3999999999999998, 0.40799999999999981), (0.70999999999999963, 0.71899999999999964)], 1100000000.0: [(0.20999999999999996, 0.20999999999999996), (0.34999999999999987, 0.35399999999999987), (0.61999999999999977, 0.62599999999999978)], 6100000000.0: [(0.19999999999999996, 0.20199999999999996), (0.33999999999999986, 0.34199999999999986), (0.59999999999999976, 0.60399999999999976)], 8100000000.0: [(0.19999999999999996, 0.19999999999999996), (0.32999999999999985, 0.33799999999999986), (0.58999999999999975, 0.59799999999999975)], 10100000000.0: [(0.18999999999999995, 0.19799999999999995), (0.32999999999999985, 0.33399999999999985), (0.57999999999999974, 0.58899999999999975)], 12100000000.0: [(0.18999999999999995, 0.19699999999999995), (0.32999999999999985, 0.33399999999999985), (0.58999999999999975, 0.59099999999999975)], 14100000000.0: [(0.18999999999999995, 0.19199999999999995), (0.3199999999999999, 0.3249999999999999), (0.53999999999999981, 0.54899999999999982), (0.56299999999999972, 0.57699999999999974), (0.96999999999999953, 0.97499999999999953)], 2990000000.0: [(0.20999999999999996, 0.21399999999999997), (0.35999999999999988, 0.36199999999999988), (0.63999999999999968, 0.63999999999999968)], 18100000000.0: [(0.15999999999999998, 0.16499999999999998), (0.17799999999999999, 0.18199999999999997), (0.29999999999999993, 0.30799999999999994), (0.5199999999999998, 0.5209999999999998), (0.9199999999999996, 0.9229999999999996)], 19900000000.0: [(0.15999999999999998, 0.16299999999999998), (0.29999999999999993, 0.30199999999999994), (0.50999999999999979, 0.51099999999999979), (0.89999999999999958, 0.90399999999999958)], 16100000000.0: [(0.15999999999999998, 0.16899999999999998), (0.17799999999999999, 0.18699999999999997), (0.30999999999999994, 0.31599999999999995), (0.5299999999999998, 0.53299999999999981), (0.93999999999999961, 0.94499999999999962)], 2500000000.0: [(0.20999999999999996, 0.21299999999999997), (0.35999999999999988, 0.36099999999999988), (0.62999999999999967, 0.63699999999999968)], 2100000000.0: [(0.20999999999999996, 0.21099999999999997), (0.34999999999999987, 0.35699999999999987), (0.61999999999999977, 0.62899999999999978)], 3100000000.0: [(0.20999999999999996, 0.21399999999999997), (0.35999999999999988, 0.36099999999999988), (0.62999999999999967, 0.63699999999999968)], 4100000000.0: [(0.19999999999999996, 0.20499999999999996), (0.33999999999999986, 0.34599999999999986), (0.60999999999999976, 0.61299999999999977)]}
#    def setPowerDBm(self, power):
#        amp = 
#        if power > self.powerProtectionLevel:
#            print('Power too high! Set: '+str(power)+', Allowed: '+str(self.powerProtectionLevel))
#            return
#        freq = self.getFrequency()
#        # Find closest frequency match
#        err = 1e20
#        bestMatchFreq = 0
#        for i in self.validRangeList.keys():
#            if abs(i-freq) < err:
#                err = abs(i-freq)
#                bestMatchFreq = i
#        
#        self.validVoltage = False
#        for i in self.validRangeList[bestMatchFreq]:
#            if 
#        self.instr.write("POW "+str(power)+"DBM")
